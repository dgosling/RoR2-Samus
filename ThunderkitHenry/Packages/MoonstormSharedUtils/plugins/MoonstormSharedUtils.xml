<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MoonstormSharedUtils</name>
    </assembly>
    <members>
        <member name="T:Moonstorm.Components.DestroyOnEnable">
            <summary>
            Destroys the game object attatched when enabled
            </summary>
        </member>
        <member name="T:Moonstorm.Components.EventDirector">
            <summary>
            MSU's Event Director
            </summary>
        </member>
        <member name="F:Moonstorm.Components.EventDirector.consecutiveEventSpawn">
            <summary>How many times the same event has spawned.</summary>
        </member>
        <member name="M:Moonstorm.Components.EventDirector.ForceEvent(RoR2.ConCommandArgs)">
             Commands
            -------------------------------------------------------------------------------------
        </member>
        <member name="F:Moonstorm.Components.SetupWeatherController.blacklistedScenes">
            <summary>
            If a scene in the game, modded or unmodded, should not have weather changes, add it to this list.
            </summary>
        </member>
        <member name="T:Moonstorm.Components.ManagerExtension">
            <summary>
            A class to derive a MoonstormItemManager Extension
            </summary>
        </member>
        <member name="F:Moonstorm.Components.ManagerExtension.manager">
            <summary>
            A direct access to the manager that's attatched to the body
            </summary>
        </member>
        <member name="F:Moonstorm.Components.ManagerExtension.body">
            <summary>
            The body that this component is attatched to
            </summary>
        </member>
        <member name="M:Moonstorm.Components.ManagerExtension.GetInterfaces">
            <summary>
            Obtain any custom interfaces here.
            Gets called once the main manager's GetInterfaces method ends
            </summary>
        </member>
        <member name="M:Moonstorm.Components.ManagerExtension.CheckForItems">
            <summary>
            Check for any custom Item/Equipment related logic here
            Gets called once the main manager's CheckForItems method ends
            </summary>
        </member>
        <member name="M:Moonstorm.Components.ManagerExtension.CheckForBuffs">
            <summary>
            Check for any Buff related logic here
            Gets called once the main manager's CheckForBuffs method ends
            </summary>
        </member>
        <member name="T:Moonstorm.Components.HGControllerFinder">
            <summary>
            Attach this component to a gameObject and pass a meshrenderer in. It'll attempt to find the correct shader controller from the meshrenderer material, attach it if it finds it, and destroy itself.
            </summary>
        </member>
        <member name="T:Moonstorm.ConfigurableField">
            <summary>
            Declares that a field can be configured using the mod's Config File
            </summary>
        </member>
        <member name="P:Moonstorm.ConfigurableField.ConfigSection">
            <summary>
            Write your custom section here, leaving this null will use the declaring type's name
            </summary>
        </member>
        <member name="P:Moonstorm.ConfigurableField.ConfigName">
            <summary>
            Write a custom config name, leaving this null will use the field's name
            </summary>
        </member>
        <member name="P:Moonstorm.ConfigurableField.ConfigDesc">
            <summary>
            Write a custom config description, leaving this null will use a generic description
            </summary>
        </member>
        <member name="T:Moonstorm.DisabledContent">
            <summary>
            Attatch this attribute to a ContentBase inheriting class and MSU will ignore this class when initializing your content bases.
            </summary>
        </member>
        <member name="T:Moonstorm.StatTypes">
            <summary>
            Enum for modifying the value of a field for use in tokens
            </summary>
        </member>
        <member name="F:Moonstorm.StatTypes.Default">
            <summary>
            No changes are made to the value in the field
            </summary>
        </member>
        <member name="F:Moonstorm.StatTypes.Percentage">
            <summary>
            The value of the field gets multiplied by 100
            </summary>
        </member>
        <member name="F:Moonstorm.StatTypes.DivideBy2">
            <summary>
            The value of the field gets divided by 2
            </summary>
        </member>
        <member name="T:Moonstorm.TokenModifier">
            <summary>
            Declares that the value from a field must be used for formatting a language token
            </summary>
        </member>
        <member name="M:Moonstorm.TokenModifier.#ctor(System.String,Moonstorm.StatTypes,System.Int32)">
            <summary>
            Initialize a TokenModifier
            </summary>
            <param name="langToken">The key for the language token to modify. ej: ITEM_SYRINGE_NAME</param>
            <param name="statType">A special operation to do on the field's value.</param>
            <param name="formatIndex">The formatting index that corresponds to this token modifier</param>
        </member>
        <member name="T:Moonstorm.ConfigurableFieldManager">
            <summary>
            Class for managing ConfigurableField attributes
            </summary>
        </member>
        <member name="M:Moonstorm.ConfigurableFieldManager.AddMod(BepInEx.Configuration.ConfigFile)">
            <summary>
            Adds a mod to the ConfigurableField manager
            <para>Will automatically look for Types that have fields with ConfigurableField attribute and add them for configuration</para>
            </summary>
            <param name="configFile">Your Mod's ConfigFile</param>
        </member>
        <member name="T:Moonstorm.ArtifactBase">
            <summary>
            A Content Base Class for initializing Artifacts
            </summary>
        </member>
        <member name="P:Moonstorm.ArtifactBase.ArtifactDef">
            <summary>
            Your Artifact's ArtifactDef
            </summary>
        </member>
        <member name="P:Moonstorm.ArtifactBase.ArtifactCode">
            <summary>
            An ArtifactCode from R2API, used for creating a bulwark's ambry trial for your artifact, can be left null.
            </summary>
        </member>
        <member name="M:Moonstorm.ArtifactBase.OnArtifactDisabled">
            <summary>
            Unsubscribe from any Delegates or Events you subscribed before.
            Ran when the artifact is disabled
            </summary>
        </member>
        <member name="M:Moonstorm.ArtifactBase.OnArtifactEnabled">
            <summary>
            Subscribe from any Delegates or Events you need.
            Ran when the artifact is enabled
            </summary>
        </member>
        <member name="T:Moonstorm.BuffBase">
            <summary>
            A Content Base Class for initializing a Buff
            </summary>
        </member>
        <member name="P:Moonstorm.BuffBase.BuffDef">
            <summary>
            Your Buff's BuffDef
            </summary>
        </member>
        <member name="M:Moonstorm.BuffBase.AddBehavior(RoR2.CharacterBody@,System.Int32)">
            <summary>
            Add an ItemBehavior to the body.
            <para>Use body.AddItemBehavior(stack)</para>
            <para>T must be a class that inherits from CharacterBody.ItemBehavior</para>
            <para>This class must implement all the functionality of the buff</para>
            </summary>
            <param name="body">The body which is getting affected by the buff</param>
            <param name="stack">The amount of stacks of the buff calculated automatically by the mod</param>
        </member>
        <member name="T:Moonstorm.CharacterBase">
            <summary>
            A Content Base Class for initializing character
            <para>If you want to initialize a survivor, you should look at SurvivorBase</para>
            <para>If you want to initialize a monster, you should look at MonsterBase</para>
            </summary>
        </member>
        <member name="P:Moonstorm.CharacterBase.BodyPrefab">
            <summary>
            The Body Prefab of your Character
            </summary>
        </member>
        <member name="P:Moonstorm.CharacterBase.MasterPrefab">
            <summary>
            The MasterPrefab of your character
            </summary>
        </member>
        <member name="M:Moonstorm.CharacterBase.Initialize">
            <summary>
            Initialize your Character here
            <para>Calling base.Initialize() runs the method "ModifyPrefab" and the method "Hook"</para>
            </summary>
        </member>
        <member name="M:Moonstorm.CharacterBase.ModifyPrefab">
            <summary>
            Modify your Prefabs here
            </summary>
        </member>
        <member name="M:Moonstorm.CharacterBase.Hook">
            <summary>
            Use hooks here.
            </summary>
        </member>
        <member name="T:Moonstorm.ContentBase">
            <summary>
            A Class where all the other Content Base classes inherit from.
            </summary>
        </member>
        <member name="M:Moonstorm.ContentBase.Initialize">
            <summary>
            Initialize your content here.
            </summary>
        </member>
        <member name="T:Moonstorm.DamageTypeBase">
            <summary>
            A Content Base Class for initializing a Damage Type
            </summary>
        </member>
        <member name="P:Moonstorm.DamageTypeBase.ModdedDamageType">
            <summary>
            Your ModdedDamageType
            </summary>
        </member>
        <member name="M:Moonstorm.DamageTypeBase.GetDamageType">
            <summary>
            Get the DamageType asociated with this DamageTypeBase
            </summary>
            <returns>The ModdedDamageType asociated with this DamageTypeBase</returns>
        </member>
        <member name="M:Moonstorm.DamageTypeBase.Delegates">
            <summary>
            Subscribe to any needed Events or Delegates here to run your DamageType's logic
            </summary>
        </member>
        <member name="T:Moonstorm.EliteEquipmentBase">
            <summary>
            A Content Base Class for initializing an Elite Equipment
            <para>Inherits from EquipmentBase</para>
            </summary>
        </member>
        <member name="P:Moonstorm.EliteEquipmentBase.EliteDef">
            <summary>
            Your Elite's MSEliteDef
            </summary>
        </member>
        <member name="T:Moonstorm.EquipmentBase">
            <summary>
            A Content Base Class for initializing an Equipment
            </summary>
        </member>
        <member name="P:Moonstorm.EquipmentBase.EquipmentDef">
            <summary>
            Your Equipment's EquipmentDef
            </summary>
        </member>
        <member name="M:Moonstorm.EquipmentBase.AddBehavior(RoR2.CharacterBody@,System.Int32)">
            <summary>
            Add an ItemBehavior to the body.
            <para>Use body.AddItemBehavior(stack)</para>
            <para>T must be a class that inherits from CharacterBody.ItemBehavior</para>
            <para>This class must implement all the functionality of the equipment</para>
            <para>The behavior can also be added on FireAction instead</para>
            </summary>
            <param name="body">The body which is getting affected by the equipment</param>
            <param name="stack">The amount of stacks of the equipment, this value is always 1</param>
        </member>
        <member name="M:Moonstorm.EquipmentBase.FireAction(RoR2.EquipmentSlot)">
            <summary>
            Used for writing the logic of firing your Equipment.
            </summary>
            <param name="slot">The EquipmentSlot of the Characterbody</param>
            <returns>True if succesfully fired, false otherwise</returns>
        </member>
        <member name="T:Moonstorm.InteractableBase">
            <summary>
            A Content Base Class for initializing an Interactable
            </summary>
        </member>
        <member name="P:Moonstorm.InteractableBase.Interactable">
            <summary>
            The main prefab of your Interactable
            </summary>
        </member>
        <member name="P:Moonstorm.InteractableBase.InteractableDirectorCard">
            <summary>
            And MSInteractableDirectorCard that spawns your interactable
            <para>Used for the SceneDirector</para>
            </summary>
        </member>
        <member name="T:Moonstorm.ItemBase">
            <summary>
            A Content Base Class for initializing an Item
            </summary>
        </member>
        <member name="P:Moonstorm.ItemBase.ItemDef">
            <summary>
            Your Item's ItemDef
            </summary>
        </member>
        <member name="M:Moonstorm.ItemBase.AddBehavior(RoR2.CharacterBody@,System.Int32)">
            <summary>
            Add an ItemBehavior to the body.
            <para>Use body.AddItemBehavior(stack)</para>
            <para>T must be a class that inherits from CharacterBody.ItemBehavior</para>
            <para>This class must implement all the functionality of the Item</para>
            </summary>
            <param name="body">The body which is getting affected by the Item</param>
            <param name="stack">The amount of stacks of the Item, this value automatically calculated</param>
        </member>
        <member name="T:Moonstorm.MonsterBase">
            <summary>
            A Content Base Class for inittializing a Monster
            <para>Inherits from CharacterBase</para>
            </summary>
        </member>
        <member name="P:Moonstorm.MonsterBase.MonsterDirectorCard">
            <summary>
            Your Monster's Monster Director Card
            </summary>
        </member>
        <member name="T:Moonstorm.ProjectileBase">
            <summary>
            A Content Base Class for initializing a Projectile
            </summary>
        </member>
        <member name="P:Moonstorm.ProjectileBase.ProjectilePrefab">
            <summary>
            The prefab of your projectile.
            </summary>
        </member>
        <member name="T:Moonstorm.SceneBase">
            <summary>
            A content class for initializing and handling scenes
            </summary>
        </member>
        <member name="P:Moonstorm.SceneBase.SceneDef">
            <summary>
            Your Scene's SceneDef. It also works for SceneDefinitions from ROS.
            </summary>
        </member>
        <member name="T:Moonstorm.SurvivorBase">
            <summary>
            A Content Class for initializing a Survivor
            <para>Inherits from CharacterBase</para>
            </summary>
        </member>
        <member name="P:Moonstorm.SurvivorBase.SurvivorDef">
            <summary>
            Your Survivor's survivorDef
            </summary>
        </member>
        <member name="T:Moonstorm.UnlockableBase">
            <summary>
            A Content Base Class for initializing an Unlockable
            </summary>
        </member>
        <member name="P:Moonstorm.UnlockableBase.UnlockableDef">
            <summary>
            Your Unlockable's unlockableDef
            </summary>
        </member>
        <member name="P:Moonstorm.UnlockableBase.RequiredTypes">
            <summary>
            A collection of Types that need to be initialized before the unlockable is added to the game.
            <para>Use "AddRequiredType" for adding dependencies</para>
            </summary>
        </member>
        <member name="M:Moonstorm.UnlockableBase.AddRequiredType``1">
            <summary>
            Adds a ContentBase inheriting class as a dependency for this unlockable to be added to the game
            </summary>
            <typeparam name="T">The class that needs to be initialized before the unlockable gets initialized</typeparam>
        </member>
        <member name="M:Moonstorm.UnlockableBase.LateInitialization">
            <summary>
            LateInitialization gets called when the unlockable has passed the RequiredTypes check.
            <para>Any final initialization should be done here</para>
            </summary>
        </member>
        <member name="P:Moonstorm.UnlockableBase.GetAchievementDef">
            <summary>
            Gets the AchievementDef that corresponds to this Unlockable
            </summary>
        </member>
        <member name="T:Moonstorm.EventCatalog">
            <summary>
            Moonstorm Shared Utils's EventCatalog
            </summary>
        </member>
        <member name="P:Moonstorm.EventCatalog.HasAnyEventRegistered">
            <summary>
            Returns true if the amount of registered events is greater than 0, false otherwise
            </summary>
        </member>
        <member name="F:Moonstorm.EventCatalog.eventNames">
            <summary>
            An array of all the event names
            </summary>
        </member>
        <member name="F:Moonstorm.EventCatalog.eventNameToIndex">
            <summary>
            A Dictionary to go from an event name to it's event index
            </summary>
        </member>
        <member name="F:Moonstorm.EventCatalog.eventIndexToCard">
            <summary>
            A Dictionary to go from an event index to the EventDirectorCard
            </summary>
        </member>
        <member name="F:Moonstorm.EventCatalog.sceneToCards">
            <summary>
            A Dictionary to go from a SceneDef to the EventDirectorCards that belong in said scene
            </summary>
        </member>
        <member name="M:Moonstorm.EventCatalog.AddEventDecks(Moonstorm.ScriptableObjects.EventSceneDeck[])">
            <summary>
            Adds the given EventSceneDecks to the EventCatalog
            </summary>
            <param name="decks">An Array of EventSceneDecks</param>
        </member>
        <member name="M:Moonstorm.EventCatalog.AddEventDeck(Moonstorm.ScriptableObjects.EventSceneDeck)">
            <summary>
            Adds the given EventSceneDeck to the EventCatalog
            </summary>
            <param name="newDeck">The EventSceneDeck to add</param>
        </member>
        <member name="M:Moonstorm.EventCatalog.GetCurrentStageEvents">
            <summary>
            Gets the current stage's events
            </summary>
            <returns>Returns the current stage's EventCardDeck</returns>
        </member>
        <member name="M:Moonstorm.EventCatalog.GetStageEvents(RoR2.SceneDef)">
            <summary>
            Get a stage's events
            </summary>
            <param name="scene">The scene to get the events</param>
            <returns>Returns the given scene's EventCardDeck</returns>
        </member>
        <member name="M:Moonstorm.EventCatalog.TryFindDirectorCard(System.String,Moonstorm.ScriptableObjects.EventDirectorCard@)">
            <summary>
            Tries to find a director card by its name
            </summary>
            <param name="cardName">The name of the card</param>
            <param name="card">The card itself, if not found, it'll be null</param>
            <returns>True if succesfully found, false otherwise</returns>
        </member>
        <member name="M:Moonstorm.EventCatalog.TryFindDirectorCard(Moonstorm.EventIndex,Moonstorm.ScriptableObjects.EventDirectorCard@)">
            <summary>
            Tries to find a director card by using the EventIndex
            </summary>
            <param name="eventIndex">The EventIndex</param>
            <param name="card">The card that has the given EventIndex, if no card is found, this will be null</param>
            <returns>true if succesful, false otherwise</returns>
        </member>
        <member name="T:Moonstorm.IBodyStatArgModifier">
            <summary>
            Interface for modifying a body's stats. Uses R2API's RecalculateStatsAPI
            <para>Should be used only in ItemBehaviors</para>
            </summary>
        </member>
        <member name="M:Moonstorm.IBodyStatArgModifier.ModifyStatArguments(R2API.RecalculateStatsAPI.StatHookEventArgs)">
            <summary>
            Modify the StatArguments that are going to be added to the body
            </summary>
            <param name="args">The arguments themselves, NEVER overwrite the fields, only Add, Divide, Multiply or Substract them.</param>
        </member>
        <member name="T:Moonstorm.IOnIncomingDamageOtherServerReciever">
            <summary>
            Interface for modifying the Incoming damage of a soon to be victim.
            <para>Should be used only in ItemBehaviors</para>
            </summary>
        </member>
        <member name="M:Moonstorm.IOnIncomingDamageOtherServerReciever.OnIncomingDamageOther(RoR2.HealthComponent,RoR2.DamageInfo)">
            <summary>
            Method for modifying the damage info before health is deducted from the victim.
            </summary>
            <param name="victimHealthComponent">The Victim's health component.</param>
            <param name="damageInfo">The DamageInfo you can modify.</param>
        </member>
        <member name="T:Moonstorm.IStatItemBehavior">
            <summary>
            Interface used for RecalculateStats
            <para>Should only be used in ItemBehaviors</para>
            <para>This interface is best for modifying stats not supported by IBodyStatArgModifier, or for getting the values of stats after recalculation is finished</para>
            </summary>
        </member>
        <member name="M:Moonstorm.IStatItemBehavior.RecalculateStatsEnd">
            <summary>
            Code in here is the same as writing your code after orig(self)
            </summary>
        </member>
        <member name="M:Moonstorm.IStatItemBehavior.RecalculateStatsStart">
            <summary>
            Code in here is the same as writing your code before orig(self)
            </summary>
        </member>
        <member name="T:Moonstorm.Loaders.AssetsLoader`1">
            <summary>
            Class for loading your mod's AssetBundles
            <para>Handles swapping stubbed shaders from MoonstormSharedEditorUtils</para>
            </summary>
            <typeparam name="T">The instance of your class</typeparam>
        </member>
        <member name="M:Moonstorm.Loaders.AssetsLoader`1.LoadAsset``1(System.String)">
            <summary>
            Loads an asset from the MainAssetbundle, assuming an Instance of AssetLoader exists
            </summary>
            <typeparam name="TAsset">The type of asset to load</typeparam>
            <param name="name">The name of the asset</param>
            <returns>The asset</returns>
        </member>
        <member name="M:Moonstorm.Loaders.AssetsLoader`1.LoadAllAssetsOfType``1">
            <summary>
            Loads all assets of type TAsset from the MainAssetBundle, assuming an Instance of AssetLoader exists
            </summary>
            <typeparam name="TAsset">The Type of asset to load</typeparam>
            <returns>An array of TAsset</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Moonstorm.Loaders.AssetsLoader" -->
        <member name="P:Moonstorm.Loaders.AssetsLoader.MainAssetBundle">
            <summary>
            Your mod's Main AssetBundle
            </summary>
        </member>
        <member name="P:Moonstorm.Loaders.AssetsLoader.AssemblyDir">
            <summary>
            The directory of your assembly
            </summary>
        </member>
        <member name="P:Moonstorm.Loaders.AssetsLoader.MaterialsWithSwappedShaders">
            <summary>
            List holding all the materials with swapped shaders
            </summary>
        </member>
        <member name="M:Moonstorm.Loaders.AssetsLoader.LoadEffectDefsFromHolders(UnityEngine.AssetBundle)">
            <summary>
            Automatically loads all the EffectDefs from your assetbundle using the EffectDefHolder
            </summary>
            <param name="bundle">The bundle to load from</param>
            <returns>An array of all the EffectDefs</returns>
        </member>
        <member name="M:Moonstorm.Loaders.AssetsLoader.LoadEffectDefsFromPrefabs(UnityEngine.AssetBundle)">
            <summary>
            Automatically loads all the EffectDefs from your assetbundle by looking for prefabs with the EffectComponent component
            </summary>
            <param name="bundle">The bundle to load from</param>
            <returns>An array of all the EffectDefs</returns>
        </member>
        <member name="M:Moonstorm.Loaders.AssetsLoader.AddEffectDefsToSerializableContentPack(RoR2.EffectDef[],RoR2.ContentManagement.SerializableContentPack)">
            <summary>
            Adds all the given EffectDefs to a SerializableContentPack
            </summary>
            <param name="effectDefs">The effectDefs to add</param>
            <param name="contentPack">The SerializableContentPack to be filled with effectDefs</param>
        </member>
        <member name="M:Moonstorm.Loaders.AssetsLoader.AddEffectDefsToContentPack(RoR2.EffectDef[],RoR2.ContentManagement.ContentPack)">
            <summary>
            Adds all the given EffectDefs to a ContentPack
            </summary>
            <param name="effectDefs">The EffectDefs to add</param>
            <param name="contentPack">The ContentPack to be filled with EffectDefs</param>
        </member>
        <member name="M:Moonstorm.Loaders.AssetsLoader.SwapShadersFromMaterialsInBundle(UnityEngine.AssetBundle)">
            <summary>
            Swaps all the stubbed shaders from MoonstormSharedEditorUtils to use the correct shaders
            <para>Automatically stores the swapped shaders in a static list</para>
            </summary>
            <param name="bundle">The bundle to load all the materials with shaders to be swapped</param>
        </member>
        <member name="T:Moonstorm.Loaders.ContentLoader`1">
            <summary>
            Class for loading your mod's Content asynchronously
            <para>Handles populating static types that hold references to assets.</para>
            </summary>
            <typeparam name="T">The Instance of your class</typeparam>
        </member>
        <member name="T:Moonstorm.Loaders.ContentLoader">
            <summary>
            Class for loading your mod's Content asynchronously
            <para>Handles populating static types that hold references to assets</para>
            <para>Inherit from ContentLoaderT instead</para>
            </summary>
        </member>
        <member name="P:Moonstorm.Loaders.ContentLoader.identifier">
            <summary>
            A unique identifier for the content
            </summary>
        </member>
        <member name="P:Moonstorm.Loaders.ContentLoader.ContentPack">
            <summary>
            The Mod's ContentPack
            </summary>
        </member>
        <member name="P:Moonstorm.Loaders.ContentLoader.SerializableContentPack">
            <summary>
            The SerializableContentPack of the Mod
            </summary>
        </member>
        <member name="P:Moonstorm.Loaders.ContentLoader.LoadDispatchers">
            <summary>
            An array of actions to load your mod.
            <see href="https://github.com/swuff-star/LostInTransit/blob/7df8122594a1bd637f9ad22aec33b229ec6eec0c/LIT/Assets/LostInTransit/Modules/LITContent.cs#L80-L121">Example available here</see>
            </summary>
        </member>
        <member name="P:Moonstorm.Loaders.ContentLoader.PopulateFieldsDispatchers">
             <summary>
             An array of actions for setting static fields of your content.
            <see href="https://github.com/swuff-star/LostInTransit/blob/7df8122594a1bd637f9ad22aec33b229ec6eec0c/LIT/Assets/LostInTransit/Modules/LITContent.cs#L123-L141">Example available here</see>
             </summary>
        </member>
        <member name="M:Moonstorm.Loaders.ContentLoader.Init">
            <summary>
            Calling base.Init() automatically hooks onto ContentManager.collectContentPackProviders
            </summary>
        </member>
        <member name="M:Moonstorm.Loaders.ContentLoader.PopulateTypeFields``1(System.Type,RoR2.ContentManagement.NamedAssetCollection{``0})">
            <summary>
            Populates a type's fields with the assets
            <para>RoR2 uses this for their RoR2Content.Items class</para>
            </summary>
            <typeparam name="TAsset">The type of asset to use</typeparam>
            <param name="typeToPopulate">The type to populate</param>
            <param name="assets">The assets to use for population</param>
        </member>
        <member name="T:Moonstorm.Loaders.LanguageLoader`1">
            <summary>
            Class for loading Language Files
            <para>Automatically adds a Language folder to the game so it loads into the game's token dictionary</para>
            </summary>
            <typeparam name="T">The instance of your class</typeparam>
        </member>
        <member name="T:Moonstorm.Loaders.LanguageLoader">
            <summary>
            Class for loading Language Files
            <para>Automatically adds a Language folder to the game so it loads into the game's token dictionary</para>
            <para>Inherit from LanguageLoaderT instead</para>
            </summary>
        </member>
        <member name="P:Moonstorm.Loaders.LanguageLoader.AssemblyDir">
            <summary>
            The directory of your assembly
            </summary>
        </member>
        <member name="P:Moonstorm.Loaders.LanguageLoader.LanguagesFolderName">
            <summary>
            The name of the Folder that contains the language files
            </summary>
        </member>
        <member name="M:Moonstorm.Loaders.LanguageLoader.LoadLanguages">
            <summary>
            Loads the LanguageFile into the game
            </summary>
        </member>
        <member name="T:Moonstorm.ArtifactModuleBase">
            <summary>
            A Module Base for Managing Artifacts
            <para>Automatically handles logic for dynamically hooking and unhooking your artifact's functionalities</para>
            </summary>
        </member>
        <member name="F:Moonstorm.ArtifactModuleBase.MoonstormArtifacts">
            <summary>
            Dictionary of all the Artifacts loaded by Moonstorm Shared Utils
            </summary>
        </member>
        <member name="P:Moonstorm.ArtifactModuleBase.LoadedArtifactDefs">
            <summary>
            Returns all the Artifacts loaded by Moonstorm Shared Utils
            </summary>
        </member>
        <member name="M:Moonstorm.ArtifactModuleBase.InitializeArtifacts">
            <summary>
            Finds all the ArtifactBase inheriting classes in your assembly and creates instances for each found
            <para>Ignores classes with the "DisabledContent" attribute</para>
            </summary>
            <returns>An IEnumerable of all your Assembly's ArtifactBases</returns>
        </member>
        <member name="M:Moonstorm.ArtifactModuleBase.AddArtifact(Moonstorm.ArtifactBase,RoR2.ContentManagement.SerializableContentPack,System.Collections.Generic.Dictionary{RoR2.ArtifactDef,Moonstorm.ArtifactBase})">
            <summary>
            Initializes and Adds an Artifact
            </summary>
            <param name="artifact">The ArtifactBase class</param>
            <param name="contentPack">The content pack of your mod</param>
            <param name="artifactDictionary">Optional, a Dictionary for getting an ArtifactBase by feeding it the corresponding ArtifactDef</param>
        </member>
        <member name="T:Moonstorm.BuffModuleBase">
            <summary>
            A Module Base for managing Buffs
            <para>Automatically handles MaterialOverlays used in buffs and adding the ItemBehavior for them</para>
            </summary>
        </member>
        <member name="F:Moonstorm.BuffModuleBase.MoonstormBuffs">
            <summary>
            Dictionary of all the Buffs loaded by Moonstorm Shared Utils
            </summary>
        </member>
        <member name="F:Moonstorm.BuffModuleBase.MoonstormOverlayMaterials">
            <summary>
            Dictionary of all the Overlay materials loaded by Moonstorm Shared Utils
            </summary>
        </member>
        <member name="P:Moonstorm.BuffModuleBase.LoadedBuffDefs">
            <summary>
            Returns all the Buffs loaded by Moonstorm Shared Utils
            </summary>
        </member>
        <member name="M:Moonstorm.BuffModuleBase.InitializeBuffs">
            <summary>
            Finds all the BuffBase inheriting classes in your assembly and creates instances for each found.
            <para>Ignores classes with the "DisabledContent" attribute</para>
            </summary>
            <returns>An IEnumerable of all your Assembly's ItemBases</returns>
        </member>
        <member name="M:Moonstorm.BuffModuleBase.AddBuff(Moonstorm.BuffBase,RoR2.ContentManagement.SerializableContentPack,System.Collections.Generic.Dictionary{RoR2.BuffDef,Moonstorm.BuffBase})">
            <summary>
            Initializes and Adds a Buff
            </summary>
            <param name="buff">The BuffBase class</param>
            <param name="contentPack">Your Mod's cntent pack</param>
            <param name="buffDictionary">Optional, a Dictionary for getting a BuffBase by feeding it the corresponding BuffDef.</param>
        </member>
        <member name="T:Moonstorm.CharacterModuleBase">
            <summary>
            A Module Base for managing Characterbodies
            <para>Automatically adds Monsters to the CombatDirector according to the settings on the Monster's MSMonsterDirectorCard</para>
            </summary>
        </member>
        <member name="F:Moonstorm.CharacterModuleBase.MoonstormCharacters">
            <summary>
            Dictionary of all the CharacterBodies loaded by Moonstorm Shared Utils
            </summary>
        </member>
        <member name="P:Moonstorm.CharacterModuleBase.MoonstormMonsters">
            <summary>
            Returns all the Monsters loaded by Moonstorm Shared Utils
            </summary>
        </member>
        <member name="P:Moonstorm.CharacterModuleBase.MoonstormSurvivors">
            <summary>
            Returns all the Survivors loaded by Moonstorm Shared Utils
            </summary>
        </member>
        <member name="P:Moonstorm.CharacterModuleBase.LoadedCharacterBodies">
            <summary>
            Returns all the CharacterBody prefabs loaded by Moonstorm Shared Utils
            </summary>
        </member>
        <member name="P:Moonstorm.CharacterModuleBase.LoadedCharacterMasters">
            <summary>
            Returns all the CharacterMaster prefabs loaded by MoonstormSharedUtils
            </summary>
        </member>
        <member name="M:Moonstorm.CharacterModuleBase.InitializeCharacters">
            <summary>
            Finds all the CharacterBase inheriting classes in your assembly and creates instances for each found.
            <para>Ignores all classes with the "DisabledContent" attribute</para>
            </summary>
            <returns>An IEnumerable of all your Assembly's CharacterBases</returns>
        </member>
        <member name="M:Moonstorm.CharacterModuleBase.AddCharacter(Moonstorm.CharacterBase,System.Collections.Generic.Dictionary{UnityEngine.GameObject,Moonstorm.CharacterBase})">
            <summary>
            Initializes a Character
            </summary>
            <param name="character">The CharacterBase class</param>
            <param name="characterList">Optinal, a List for storing the CharacterBases.</param>
        </member>
        <member name="T:Moonstorm.DamageTypeModuleBase">
            <summary>
            A Module Base for managing DamageTypes
            </summary>
        </member>
        <member name="F:Moonstorm.DamageTypeModuleBase.MoonstormDamageTypes">
            <summary>
            Dictionary of all the damage types loaded by Moonstorm Shared Utils
            </summary>
        </member>
        <member name="P:Moonstorm.DamageTypeModuleBase.ModdedDamageTypes">
            <summary>
            Returns all the DamageTypes loaded by MoonstormSharedUtils
            </summary>
        </member>
        <member name="M:Moonstorm.DamageTypeModuleBase.InitializeDamageTypes">
            <summary>
            Finds all the DamageTypeBase inheriting classes in your assembly and creates instances for each found.
            <para>Ignores classes with the "DisabledContent" attribute</para>
            </summary>
            <returns>An IEnumerable of all your Assembly's DamageTypeBases</returns>
        </member>
        <member name="M:Moonstorm.DamageTypeModuleBase.AddDamageType(Moonstorm.DamageTypeBase,System.Collections.Generic.Dictionary{R2API.DamageAPI.ModdedDamageType,Moonstorm.DamageTypeBase})">
            <summary>
            Initializes a damage type.
            </summary>
            <param name="damageType">The DamageTypeBase class</param>
            <param name="damageTypeDictionary">Optional, a Dictionary for getting a DamageTypeBase by feeding it the corresponding ModdedDamageType</param>
        </member>
        <member name="T:Moonstorm.EliteModuleBase">
            <summary>
            A Module Base for managing Elites
            <para>Automatically handles giving the elite a custom color ramp and adds them to the CombatDirector</para>
            </summary>
        </member>
        <member name="F:Moonstorm.EliteModuleBase.MoonstormElites">
            <summary>
            List of all the loaded Elites by Moonstorm Shared Utils
            </summary>
        </member>
        <member name="M:Moonstorm.EliteModuleBase.GetNonInitializedEliteEquipments">
            <summary>
            Finds all the EliteEquipmentBases corresponding to the eliteDefs in your assetbundle
            <para>Requires the PickupModuleBase to be initialzed</para>
            </summary>
            <returns>An IEnumerable of all your Assembly's EliteEquipmentBases</returns>
        </member>
        <member name="M:Moonstorm.EliteModuleBase.AddElite(Moonstorm.EliteEquipmentBase,RoR2.ContentManagement.SerializableContentPack,System.Collections.Generic.List{Moonstorm.MSEliteDef},System.Collections.Generic.Dictionary{RoR2.EquipmentDef,Moonstorm.EquipmentBase})">
            <summary>
            Completely adds an elite to the game
            </summary>
            <param name="equip">The EliteEquipmentBase class</param>
            <param name="contentPack">The content pack of your mod</param>
            <param name="eliteList">Optional, a List for storing all the eliteDefs</param>
            <param name="equipDictionary">Optional, a Dictionary for getting an EquipmentBase by feeding it the corresponding EquipmentDef (You can cast the EqpBase into an EliteEquipmentBase)</param>
        </member>
        <member name="T:Moonstorm.InteractableModuleBase">
            <summary>
            A Module Base for Managing Interactables
            <para>Automatically adds them to the StageDirector according to the settings on the interactable's MSInteractableDirectorCard</para>
            </summary>
        </member>
        <member name="F:Moonstorm.InteractableModuleBase.MoonstormInteractables">
            <summary>
            Dictionary of all the Interactables loaded by Moonstorm Shared Utils
            </summary>
        </member>
        <member name="P:Moonstorm.InteractableModuleBase.InteractablesWithCards">
            <summary>
            Returns all the Interactables loaded by Moonstorm Shared Utils that have an MSInteractableDirectorCard
            </summary>
        </member>
        <member name="P:Moonstorm.InteractableModuleBase.InteractablesWithoutCards">
            <summary>
            Returns all the Interactables loaded by Moonstorm Shared Utils that do not have an MSInteractableDirectorCard
            </summary>
        </member>
        <member name="P:Moonstorm.InteractableModuleBase.LoadedInteractables">
            <summary>
            Returns all the Interactables loaded by Moonstorm Shared Utils
            </summary>
        </member>
        <member name="M:Moonstorm.InteractableModuleBase.InitializeInteractables">
            <summary>
            Finds all the InteractableBase inheriting classes in your assembly and creates instances for each found
            <para>Ignores classes with the DisabledContent attribute</para>
            </summary>
            <returns>An IEnumerable of all your assembly's InteractableBases</returns>
        </member>
        <member name="M:Moonstorm.InteractableModuleBase.AddInteractable(Moonstorm.InteractableBase,System.Collections.Generic.Dictionary{UnityEngine.GameObject,Moonstorm.InteractableBase})">
            <summary>
            Initializes and Adds an Interactable
            </summary>
            <param name="interactableBase">The InteractableBase class</param>
            <param name="interactableDictionary">Optional, a Dictionary for getting an InteractableBase by feeding it the interactable prefab</param>
        </member>
        <member name="T:Moonstorm.ItemDisplayModuleBase">
            <summary>
            A Module Base for managing Item Displays
            <para>Handles proper appending of IDRS values from MSSingleItemDisplayRules and MSIDRS</para>
            </summary>
        </member>
        <member name="M:Moonstorm.ItemDisplayModuleBase.Init">
            <summary>
            Initialize your ItemDisplays
            </summary>
        </member>
        <member name="M:Moonstorm.ItemDisplayModuleBase.PopulateKeyAssetsAndDisplaysFromAssetbundle">
            <summary>
            Populates all the Key assets and Item Display Prefabs from your Assetbundle
            </summary>
        </member>
        <member name="M:Moonstorm.ItemDisplayModuleBase.PopulateMSIDRSFromAssetBundle">
            <summary>
            Populates all your MSIDRS from your Assetbundle
            </summary>
        </member>
        <member name="M:Moonstorm.ItemDisplayModuleBase.PopulateSingleItemDisplayRuleFromAssetBundle">
            <summary>
            Populates all your SingleItemDisplayRules from your Assetbundle
            </summary>
        </member>
        <member name="T:Moonstorm.ModuleBase">
            <summary>
            A Class where all other ModuleBase classes inherit from
            </summary>
        </member>
        <member name="P:Moonstorm.ModuleBase.ContentPack">
            <summary>
            Your Mod's Content Pack
            </summary>
        </member>
        <member name="P:Moonstorm.ModuleBase.AssetBundle">
            <summary>
            Your Mod's AssetBundle
            </summary>
        </member>
        <member name="M:Moonstorm.ModuleBase.GetContentClasses``1(System.Type)">
            <summary>
            Gets all the ContentClasses of type T that dont have the DisabledContent attribute
            </summary>
            <typeparam name="T">The type of content base to look for</typeparam>
            <param name="excludedType">A type of class that works as an extra filter. PickupsModuleBase uses this for filtering between Equipments and EliteEquipments</param>
            <returns></returns>
        </member>
        <member name="T:Moonstorm.PickupModuleBase">
            <summary>
            A Module Base for managing Items and Equipments.
            <para>Automatically handles the ItemBehaviors of the items and Equipment's actions</para>
            </summary>
        </member>
        <member name="F:Moonstorm.PickupModuleBase.MoonstormItems">
            <summary>
            Dictionary of all the items loaded by Moonstorm Shared Utils
            </summary>
        </member>
        <member name="P:Moonstorm.PickupModuleBase.MoonstormEquipments">
            <summary>
            Returns all the equipments loaded by Moonstorm Shared Utils
            <para>Includes elite equipments.</para>
            </summary>
        </member>
        <member name="F:Moonstorm.PickupModuleBase.MoonstormNonEliteEquipments">
            <summary>
            Dictionary of all the normal equipments loaded by Moonstorm Shared Utils
            </summary>
        </member>
        <member name="F:Moonstorm.PickupModuleBase.MoonstormEliteEquipments">
            <summary>
            Dictionary of all the Elite Equipments loaded and initialized by Moonstorm Shared Utils
            </summary>
        </member>
        <member name="P:Moonstorm.PickupModuleBase.LoadedItemDefs">
            <summary>
            Returns all the ItemDefs inside MoonstormItems
            </summary>
        </member>
        <member name="P:Moonstorm.PickupModuleBase.LoadedEquipDefs">
            <summary>
            Returns all the EquipmentDefs inside MoonstormEquipments and MoonstormEliteEquipments.
            </summary>
        </member>
        <member name="E:Moonstorm.PickupModuleBase.onManagerAdded">
            <summary>
            An event that runs once MSU adds the ItemManager to the Body
            </summary>
        </member>
        <member name="M:Moonstorm.PickupModuleBase.InitializeItems">
            <summary>
            Finds all the ItemBase inheriting classes in your assembly and creates instances for each found.
            <para>Ignores classes with the "DisabledContent" attribute</para>
            </summary>
            <returns>An IEnumerable of all your Assembly's ItemBases</returns>
        </member>
        <member name="M:Moonstorm.PickupModuleBase.AddItem(Moonstorm.ItemBase,RoR2.ContentManagement.SerializableContentPack,System.Collections.Generic.Dictionary{RoR2.ItemDef,Moonstorm.ItemBase})">
            <summary>
            Initializes and Adds an Item
            </summary>
            <param name="item">The ItemBase class</param>
            <param name="contentPack">The content pack of your mod</param>
            <param name="itemDictionary">Optional, a Dictionary for getting an ItemBase by feeding it the corresponding ItemDef.</param>
        </member>
        <member name="M:Moonstorm.PickupModuleBase.InitializeEquipments">
            <summary>
            Finds all the EquipmentBase inheriting classes in your assembly and creates an instance for each found.
            <para>Ignores classes with the DisabledContent Attribute</para>
            <para>Exclude classes inheriting from EliteEquipmentBase</para>
            </summary>
            <returns>An IEnumerable of all your Assembly's EquipmentBases</returns>
        </member>
        <member name="M:Moonstorm.PickupModuleBase.AddEquipment(Moonstorm.EquipmentBase,RoR2.ContentManagement.SerializableContentPack,System.Collections.Generic.Dictionary{RoR2.EquipmentDef,Moonstorm.EquipmentBase})">
            <summary>
            Initializes and Adds an Equipment
            </summary>
            <param name="equip">The EquipmentBase class</param>
            <param name="contentPack">Your Mod's content pack</param>
            <param name="equipDictionary">Optional, a dictionary for getting an EquipmentBase by feeding it the corresponding EquipmentDef</param>
        </member>
        <member name="M:Moonstorm.PickupModuleBase.InitializeEliteEquipments">
            <summary>
            Finds all the EliteEquipmentBase inheriting classes in your assembly and creates instances for each found.
            <para>Ignores classes with the DisabledContent attribute</para>
            </summary>
            <returns>An IEnumerable of all your Assembly's EliteEquipmentBases</returns>
        </member>
        <member name="M:Moonstorm.PickupModuleBase.AddEliteEquipment(Moonstorm.EliteEquipmentBase)">
            <summary>
            Adds an elite equipment to the moonstorm non initialized elite equipments list.
            <para>Keep in mind that this does not completely initialize the elite.</para>
            <para>The rest is done in the EliteModuleBase</para>
            </summary>
            <param name="eliteEquip">The EliteEquipmentBase class</param>
        </member>
        <member name="T:Moonstorm.ProjectileModuleBase">
            <summary>
            A module base for managing Projectiles.
            </summary>
        </member>
        <member name="F:Moonstorm.ProjectileModuleBase.MoonstormProjectiles">
            <summary>
            Dictionary of all the projectiles loaded by Moonstorm Shared Utils.
            </summary>
        </member>
        <member name="P:Moonstorm.ProjectileModuleBase.LoadedProjectiles">
            <summary>
            Returns all the projectile game objects in MoonstormProjectiles.
            </summary>
        </member>
        <member name="M:Moonstorm.ProjectileModuleBase.InitializeProjectiles">
            <summary>
            Finds all the ProjectileBase inheriting classes in your assembly and creates an instance for each found.
            <para>Ignores classes with the DisabledContent attribute</para>
            </summary>
            <returns>An IEnumerable of all your Assembly's ProjectileBases.</returns>
        </member>
        <member name="M:Moonstorm.ProjectileModuleBase.AddProjectile(Moonstorm.ProjectileBase,RoR2.ContentManagement.SerializableContentPack,System.Collections.Generic.Dictionary{UnityEngine.GameObject,Moonstorm.ProjectileBase})">
            <summary>
            Initializes and Adds a projectile
            </summary>
            <param name="projectile">The projectile base class</param>
            <param name="contentPack">The content pack of your mod</param>
            <param name="projectileDictionary">Optional, a dictionary for getting a projectile base by feeding it the corresponding projectile prefab</param>
        </member>
        <member name="T:Moonstorm.SceneModuleBase">
            <summary>
            A Module Base for Managing Scenes
            </summary>
        </member>
        <member name="F:Moonstorm.SceneModuleBase.MoonstormScenes">
            <summary>
            Dictionary of all the Scenes loaded by Moonstorm Shared Utils
            </summary>
        </member>
        <member name="P:Moonstorm.SceneModuleBase.LoadedSceneDefs">
            <summary>
            Returns all the Scenes loaded by Moonstorm Shared Utils
            </summary>
        </member>
        <member name="M:Moonstorm.SceneModuleBase.InitializeScenes">
            <summary>
            Finds all the SceneBase inheriting classes in your assembly and creates instances for each found
            <para>Ignores classes with the "DisabledContent" attribute</para>
            </summary>
            <returns>An IEnumerable of all your Assembly's SceneBases</returns>
        </member>
        <member name="M:Moonstorm.SceneModuleBase.AddScene(Moonstorm.SceneBase,RoR2.ContentManagement.SerializableContentPack,System.Collections.Generic.Dictionary{RoR2.SceneDef,Moonstorm.SceneBase})">
            <summary>
            Initializes and Adds a Scene
            </summary>
            <param name="scene">The SceneBase class</param>
            <param name="contentPack">The content pack of your mod</param>
            <param name="sceneDictionary">Optional, a Dictionary for getting a SceneBase by feeding it the corresponding SceneDef</param>
        </member>
        <member name="T:Moonstorm.UnlockablesModuleBase">
            <summary>
            A Module Base for Managing Unlockables and Achievements
            <para>Automatically handles the creation of AchievementDefs</para>
            </summary>
        </member>
        <member name="F:Moonstorm.UnlockablesModuleBase.MoonstormUnlockables">
            <summary>
            Dictionary of all the Unlockables loaded by Moonstorm Shared Utils
            </summary>
        </member>
        <member name="P:Moonstorm.UnlockablesModuleBase.LoadedUnlockables">
            <summary>
            Returns all the UnlockableDefs loaded by Moonstorm Shared Utils
            </summary>
        </member>
        <member name="M:Moonstorm.UnlockablesModuleBase.InitializeUnlockables">
            <summary>
            Finds all the UnlockableBase inheriting classes in your assembly and creates instances for each found
            <para>Ignores classes with the DisabledContent attribute</para>
            </summary>
            <returns>An IEnumerable of all your assembly's UnlockableBases</returns>
        </member>
        <member name="M:Moonstorm.UnlockablesModuleBase.AddUnlockable(Moonstorm.UnlockableBase,RoR2.ContentManagement.SerializableContentPack,System.Collections.Generic.Dictionary{Moonstorm.MSUnlockableDef,Moonstorm.UnlockableBase})">
            <summary>
            Initializes and Adds an Unlockable
            <para>If the unlockable has required types, MSU will look if said types are initialized, if not, the unlockable is not added to the game</para>
            </summary>
            <param name="unlockableBase">The UnlockableBase class</param>
            <param name="contentPack">Your Mod's content pack</param>
            <param name="unlockableDefToUnlockableBaseDict">Optional, a dictionary for getting an UnlockableBase by feeding it the corresponding UnlockableDef</param>
        </member>
        <member name="M:Moonstorm.UnlockablesModuleBase.OnFailedToCheck(System.Type)">
            <summary>
            If MoonstormSharedUtils fails to check if the required type is added, you can add your own workaround here
            </summary>
            <param name="type">The type that failed to check</param>
            <returns>True if the unlockable should be added, false otherwise</returns>
        </member>
        <member name="T:Moonstorm.TokenModifierManager">
            <summary>
            Class for managing TokenModifier attributes
            <para>TokenModifierManager runs after the ConfigurableFieldManager finishes configuring fields</para>
            </summary>
        </member>
        <member name="M:Moonstorm.TokenModifierManager.AddMod">
            <summary>
            Adds a mod to the TokenModifier manager
            <para>Will automatically look for Types that have fields with TokenModifier attribute and prepare them for formatting</para>
            </summary>
        </member>
        <member name="T:Moonstorm.Utilities.MSIDRSUtil">
            <summary>
            Utilities for handling item display rulesets from mods that do not use Thunderkit or MSU.
            </summary>
        </member>
        <member name="M:Moonstorm.Utilities.MSIDRSUtil.CreateKeyAssetDisplayPair(UnityEngine.Object,System.Collections.Generic.List{UnityEngine.GameObject})">
            <summary>
            Creates a Key Asset Display Pair struct.
            </summary>
            <param name="keyAsset">The key asset, must be either an EquipmentDef or an ItemDef</param>
            <param name="displayPrefabs">A list of display prefabs</param>
            <returns>The KeyAssetDisplayPair populated with the given arguments.</returns>
        </member>
        <member name="M:Moonstorm.Utilities.MSIDRSUtil.CreateKeyAssetDisplayPair(UnityEngine.Object,UnityEngine.GameObject)">
            <summary>
            Creates a Key Asset Display Pair struct
            </summary>
            <param name="keyAsset">The key asset, must be either an EquipmentDef or an ItemDef</param>
            <param name="displayPrefab">a display prefab.</param>
            <returns>The KeyAssetDisplayPair populated with the given arguments.</returns>
        </member>
        <member name="M:Moonstorm.Utilities.MSIDRSUtil.AddIDRSStuff(System.Collections.Generic.List{Moonstorm.KeyAssetDisplayPairHolder.KeyAssetDisplayPair})">
            <summary>
            Adds the KeyAssetDisplayPairs to the Moonstorm Item Display System.
            </summary>
            <param name="keyAssetDisplayPairs">A list of KeyAssetDisplayPairs.</param>
        </member>
        <member name="T:Moonstorm.MSUtil">
            <summary>
            Utility methods used by MoonstormSharedUtils
            </summary>
        </member>
        <member name="M:Moonstorm.MSUtil.IsModInstalled(System.String)">
            <summary>
            Checks if a mod is installed in the bepinex chainloader
            </summary>
            <param name="GUID">The GUID of the mod to check.</param>
            <returns>True if installed, false otherwise.</returns>
        </member>
        <member name="M:Moonstorm.MSUtil.InverseHyperbolicScaling(System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Calculates inverse hyperbolic scaling (diminishing) for the parameters passed in, and returns the result.
            <para>Uses the formula: baseValue + (maxValue - baseValue) * (1 - 1 / (1 + additionalValue * (itemCount - 1)))</para>
            <para>Original code by KomradeSpectre</para>
            </summary>
            <param name="baseValue">The starting value of the function.</param>
            <param name="additionalValue">The value that is added per additional itemCount</param>
            <param name="maxValue">The maximum value that the function can possibly be.</param>
            <param name="itemCount">The amount of items/stacks that increments our function.</param>
            <returns>A float representing the inverse hyperbolic scaling of the parameters.</returns>
        </member>
        <member name="M:Moonstorm.MSUtil.PlayNetworkedSFX(System.String,UnityEngine.Vector3,System.Boolean)">
            <summary>
            Shorthand for playing a networked sound event def
            </summary>
            <param name="soundEventName">The name of the sound event</param>
            <param name="pos">Position at wich to play the sound</param>
            <param name="transmit"></param>
        </member>
        <member name="T:Moonstorm.KeyAssetDisplayPairHolder.KeyAssetDisplayPair">
            <summary>
            A struct used to hold information regarding Key Assets and Display Prefabs
            </summary>
        </member>
        <member name="F:Moonstorm.KeyAssetDisplayPairHolder.KeyAssetDisplayPair.keyAsset">
            <summary>
            The key asset tied to the display prefabs.
            </summary>
        </member>
        <member name="F:Moonstorm.KeyAssetDisplayPairHolder.KeyAssetDisplayPair.displayPrefabs">
            <summary>
            A list of possible display prefabs.
            </summary>
        </member>
        <member name="T:EntityStates.Events.EventState">
            <summary>
            A generic EventState where all events inherit from
            </summary>
        </member>
        <member name="F:EntityStates.Events.EventState.eventCard">
            <summary>
            The EventDirectorCard tied to this Event
            </summary>
        </member>
        <member name="F:EntityStates.Events.EventState.drizzleDuration">
            <summary>How long this event lasts in Drizzle</summary>
        </member>
        <member name="F:EntityStates.Events.EventState.typhoonDuration">
            <summary>
            The max duration of this event
            </summary>
        </member>
        <member name="F:EntityStates.Events.EventState.warningDuration">
            <summary>
            The amount of time between the warning message and when the event starts
            </summary>
        </member>
        <member name="F:EntityStates.Events.EventState.typhoonScaling">
            <summary>
            Max scaling used for the events
            </summary>
        </member>
    </members>
</doc>
